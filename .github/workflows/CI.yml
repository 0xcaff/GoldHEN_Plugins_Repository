name: Build modules

on:
  push:
    paths-ignore:
      - "**/*.md"
      - '**/*.txt'
  pull_request:
    paths-ignore:
      - "**/*.md"
      - '**/*.txt'
  workflow_dispatch:

jobs:
  build_prx:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Checkout SDK
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.my_token }}
        repository: GoldHEN/GoldHEN_Plugins_SDK
        path: SDK

    - name: Setup variables
      run: |
        echo "OO_PS4_TOOLCHAIN=$GITHUB_WORKSPACE/OpenOrbis/PS4Toolchain" >> $GITHUB_ENV
        echo "commit_ver=1.$(git rev-list HEAD --count)" >> $GITHUB_ENV

    - name: Cache OpenOrbis Toolchain
      id: cache-oosdk
      uses: actions/cache@v3
      with:
        path: ${{ env.OO_PS4_TOOLCHAIN }}
        key: ${{ runner.os }}-oosdk

    # temporary release until 0.53 is released
    - name: Download OpenOrbis Toolchain
      if: steps.cache-oosdk.outputs.cache-hit != 'true'
      run: curl -sL https://github.com/illusion0001/OpenOrbis-PS4-Toolchain/releases/download/0.0.1.416/toolchain.tar.gz | tar xz -C ./

    - name: Setup dependencies
      run: sudo apt install llvm lld

    - name: Build SDK Static Lib
      working-directory: SDK
      run: |
        clang -v
        make DEBUGFLAGS=1
        echo "GOLDHEN_SDK=$(pwd)" >> $GITHUB_ENV

    - name: Build (Release) (printf)
      run: bash build.sh -printf

    - name: Build (Debug) (printf)
      run: bash build.sh -debug 0 -printf

    - name: Build (Release)
      run: bash build.sh

    - name: Build (Debug)
      run: bash build.sh -debug

    - name: Push module artifact (Release prx)
      uses: actions/upload-artifact@v3
      with:
        name: goldplugins_${{ env.commit_ver }}_prx_final
        path: bin/plugins/prx_final/*
        if-no-files-found: error

    - name: Push module artifact (Release elf)
      uses: actions/upload-artifact@v3
      with:
        name: goldplugins_${{ env.commit_ver }}_elf_final
        path: bin/plugins/elf_final/*.elf
        if-no-files-found: error

    - name: Push module artifact (Debug prx)
      uses: actions/upload-artifact@v3
      with:
        name: goldplugins_${{ env.commit_ver }}_prx_debug
        path: bin/plugins/prx_debug/*
        if-no-files-found: error

    - name: Push module artifact (Debug elf)
      uses: actions/upload-artifact@v3
      with:
        name: goldplugins_${{ env.commit_ver }}_elf_debug
        path: bin/plugins/elf_debug/*.elf
        if-no-files-found: error

    - name: Prepare Release
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.repository == 'GoldHEN/GoldHEN_Plugins_Repository'
      run: |
        # Removing non user related plugins from release
        BUILD=plugins
        cd bin/plugins
        mv prx_final $BUILD
        chmod -R 0777 $BUILD
        BUILD_MD5="md5.txt"
        BUILD_SHA256="sha256.txt"
        echo "MD5:" > $BUILD/$BUILD_MD5
        echo "SHA256:" > $BUILD/$BUILD_SHA256
        FILES="$BUILD/*.prx"
        for f in $FILES
        do
        if  [[ "$f" == "$BUILD/aio_fix_505.prx" ]] ||
            [[ "$f" == "$BUILD/game_call_example.prx" ]] ||
            [[ "$f" == "$BUILD/plugin_loader.prx" ]] ||
            [[ "$f" == "$BUILD/plugin_template.prx" ]]; then
            echo "[+] Skipping $f"
            rm $f
            continue
        fi
            echo "$(sha256sum $f)" >> $BUILD/$BUILD_MD5
            echo "$(md5sum $f)" >> $BUILD/$BUILD_SHA256
        done
        cat $BUILD/$BUILD_MD5
        cat $BUILD/$BUILD_SHA256
        # Create zip
        commit_hash=$(echo ${GITHUB_SHA} | cut -c1-8)
        ZIP_NAME=GoldPlugins-${{ env.commit_ver }}-$commit_hash
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
        zip -r $ZIP_NAME.zip plugins/*
        echo "<details>" > hash.md
        echo "<summary>Plugin Hashes (Click to Expand)</summary>" >> hash.md
        echo "" >> hash.md
        echo "\`\`\`md5" >> hash.md
        cat plugins/md5.txt >> hash.md
        echo "\`\`\`" >> hash.md
        echo "" >> hash.md
        echo "\`\`\`sha256" >> hash.md
        cat plugins/sha256.txt >> hash.md
        echo "\`\`\`" >> hash.md
        echo "" >> hash.md
        echo "</details>" >> hash.md

    - name: Create Release
      working-directory: bin/plugins
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.repository == 'GoldHEN/GoldHEN_Plugins_Repository'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ env.commit_ver }} ${{ env.ZIP_NAME }}.zip --target ${{ GITHUB.SHA }} -t "${{ env.commit_ver }}" -F hash.md
